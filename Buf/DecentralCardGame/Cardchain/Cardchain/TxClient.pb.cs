// <auto-generated>
//    Code generated by protoc-gen-cosmos-csharp plugin.  DO NOT EDIT!
//    The plugin is part of the DecentralCardGame project and written by lxgr@protonmail.com
//    source: cardchain/cardchain/tx.proto
// </auto-generated>
#nullable enable

using System;
using Cosmcs.Client;
using Cosmcs.Tx;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace DecentralCardGame.Cardchain.Cardchain {
	
	public class MsgClient {
		public IClient Client { get; }

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public MsgClient (IClient client) {
			Client = client;
		}
        
        /// <summary>
      	/// SendMsgCreateuser sends a MsgCreateuser transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgCreateuser message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgCreateuserResponse>> SendMsgCreateuser(MsgCreateuser msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateuser"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgCreateuserResponse>(
				r.Result,
				MsgCreateuserResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgCreateuser simulates a MsgCreateuser transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCreateuser message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgCreateuser(MsgCreateuser msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateuser"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgCreateuser simulates, estimates fees and then sends a Createuser transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCreateuser message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgCreateuserResponse>> SimulateAndSendMsgCreateuser(MsgCreateuser msg) {
			return SimulateMsgCreateuser(msg).ContinueWith(r => {
				return SendMsgCreateuser(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgBuyCardScheme sends a MsgBuyCardScheme transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgBuyCardScheme message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgBuyCardSchemeResponse>> SendMsgBuyCardScheme(MsgBuyCardScheme msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyCardScheme"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgBuyCardSchemeResponse>(
				r.Result,
				MsgBuyCardSchemeResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgBuyCardScheme simulates a MsgBuyCardScheme transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgBuyCardScheme message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgBuyCardScheme(MsgBuyCardScheme msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyCardScheme"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgBuyCardScheme simulates, estimates fees and then sends a BuyCardScheme transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgBuyCardScheme message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgBuyCardSchemeResponse>> SimulateAndSendMsgBuyCardScheme(MsgBuyCardScheme msg) {
			return SimulateMsgBuyCardScheme(msg).ContinueWith(r => {
				return SendMsgBuyCardScheme(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgVoteCard sends a MsgVoteCard transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgVoteCard message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgVoteCardResponse>> SendMsgVoteCard(MsgVoteCard msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgVoteCard"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgVoteCardResponse>(
				r.Result,
				MsgVoteCardResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgVoteCard simulates a MsgVoteCard transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgVoteCard message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgVoteCard(MsgVoteCard msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgVoteCard"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgVoteCard simulates, estimates fees and then sends a VoteCard transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgVoteCard message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgVoteCardResponse>> SimulateAndSendMsgVoteCard(MsgVoteCard msg) {
			return SimulateMsgVoteCard(msg).ContinueWith(r => {
				return SendMsgVoteCard(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgSaveCardContent sends a MsgSaveCardContent transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgSaveCardContent message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgSaveCardContentResponse>> SendMsgSaveCardContent(MsgSaveCardContent msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSaveCardContent"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgSaveCardContentResponse>(
				r.Result,
				MsgSaveCardContentResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgSaveCardContent simulates a MsgSaveCardContent transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSaveCardContent message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSaveCardContent(MsgSaveCardContent msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSaveCardContent"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgSaveCardContent simulates, estimates fees and then sends a SaveCardContent transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSaveCardContent message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgSaveCardContentResponse>> SimulateAndSendMsgSaveCardContent(MsgSaveCardContent msg) {
			return SimulateMsgSaveCardContent(msg).ContinueWith(r => {
				return SendMsgSaveCardContent(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgTransferCard sends a MsgTransferCard transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgTransferCard message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgTransferCardResponse>> SendMsgTransferCard(MsgTransferCard msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgTransferCard"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgTransferCardResponse>(
				r.Result,
				MsgTransferCardResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgTransferCard simulates a MsgTransferCard transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgTransferCard message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgTransferCard(MsgTransferCard msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgTransferCard"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgTransferCard simulates, estimates fees and then sends a TransferCard transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgTransferCard message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgTransferCardResponse>> SimulateAndSendMsgTransferCard(MsgTransferCard msg) {
			return SimulateMsgTransferCard(msg).ContinueWith(r => {
				return SendMsgTransferCard(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgDonateToCard sends a MsgDonateToCard transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgDonateToCard message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgDonateToCardResponse>> SendMsgDonateToCard(MsgDonateToCard msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgDonateToCard"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgDonateToCardResponse>(
				r.Result,
				MsgDonateToCardResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgDonateToCard simulates a MsgDonateToCard transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgDonateToCard message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgDonateToCard(MsgDonateToCard msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgDonateToCard"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgDonateToCard simulates, estimates fees and then sends a DonateToCard transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgDonateToCard message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgDonateToCardResponse>> SimulateAndSendMsgDonateToCard(MsgDonateToCard msg) {
			return SimulateMsgDonateToCard(msg).ContinueWith(r => {
				return SendMsgDonateToCard(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgAddArtwork sends a MsgAddArtwork transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgAddArtwork message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgAddArtworkResponse>> SendMsgAddArtwork(MsgAddArtwork msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddArtwork"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgAddArtworkResponse>(
				r.Result,
				MsgAddArtworkResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgAddArtwork simulates a MsgAddArtwork transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgAddArtwork message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgAddArtwork(MsgAddArtwork msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddArtwork"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgAddArtwork simulates, estimates fees and then sends a AddArtwork transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgAddArtwork message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgAddArtworkResponse>> SimulateAndSendMsgAddArtwork(MsgAddArtwork msg) {
			return SimulateMsgAddArtwork(msg).ContinueWith(r => {
				return SendMsgAddArtwork(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgChangeArtist sends a MsgChangeArtist transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgChangeArtist message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgChangeArtistResponse>> SendMsgChangeArtist(MsgChangeArtist msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgChangeArtist"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgChangeArtistResponse>(
				r.Result,
				MsgChangeArtistResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgChangeArtist simulates a MsgChangeArtist transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgChangeArtist message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgChangeArtist(MsgChangeArtist msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgChangeArtist"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgChangeArtist simulates, estimates fees and then sends a ChangeArtist transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgChangeArtist message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgChangeArtistResponse>> SimulateAndSendMsgChangeArtist(MsgChangeArtist msg) {
			return SimulateMsgChangeArtist(msg).ContinueWith(r => {
				return SendMsgChangeArtist(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgRegisterForCouncil sends a MsgRegisterForCouncil transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgRegisterForCouncil message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgRegisterForCouncilResponse>> SendMsgRegisterForCouncil(MsgRegisterForCouncil msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRegisterForCouncil"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgRegisterForCouncilResponse>(
				r.Result,
				MsgRegisterForCouncilResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgRegisterForCouncil simulates a MsgRegisterForCouncil transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgRegisterForCouncil message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRegisterForCouncil(MsgRegisterForCouncil msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRegisterForCouncil"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgRegisterForCouncil simulates, estimates fees and then sends a RegisterForCouncil transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgRegisterForCouncil message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgRegisterForCouncilResponse>> SimulateAndSendMsgRegisterForCouncil(MsgRegisterForCouncil msg) {
			return SimulateMsgRegisterForCouncil(msg).ContinueWith(r => {
				return SendMsgRegisterForCouncil(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgReportMatch sends a MsgReportMatch transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgReportMatch message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgReportMatchResponse>> SendMsgReportMatch(MsgReportMatch msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgReportMatch"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgReportMatchResponse>(
				r.Result,
				MsgReportMatchResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgReportMatch simulates a MsgReportMatch transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgReportMatch message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgReportMatch(MsgReportMatch msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgReportMatch"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgReportMatch simulates, estimates fees and then sends a ReportMatch transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgReportMatch message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgReportMatchResponse>> SimulateAndSendMsgReportMatch(MsgReportMatch msg) {
			return SimulateMsgReportMatch(msg).ContinueWith(r => {
				return SendMsgReportMatch(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgApointMatchReporter sends a MsgApointMatchReporter transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgApointMatchReporter message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgApointMatchReporterResponse>> SendMsgApointMatchReporter(MsgApointMatchReporter msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgApointMatchReporter"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgApointMatchReporterResponse>(
				r.Result,
				MsgApointMatchReporterResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgApointMatchReporter simulates a MsgApointMatchReporter transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgApointMatchReporter message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgApointMatchReporter(MsgApointMatchReporter msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgApointMatchReporter"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgApointMatchReporter simulates, estimates fees and then sends a ApointMatchReporter transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgApointMatchReporter message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgApointMatchReporterResponse>> SimulateAndSendMsgApointMatchReporter(MsgApointMatchReporter msg) {
			return SimulateMsgApointMatchReporter(msg).ContinueWith(r => {
				return SendMsgApointMatchReporter(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgCreateSet sends a MsgCreateSet transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgCreateSet message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgCreateSetResponse>> SendMsgCreateSet(MsgCreateSet msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgCreateSetResponse>(
				r.Result,
				MsgCreateSetResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgCreateSet simulates a MsgCreateSet transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCreateSet message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgCreateSet(MsgCreateSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateSet"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgCreateSet simulates, estimates fees and then sends a CreateSet transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCreateSet message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgCreateSetResponse>> SimulateAndSendMsgCreateSet(MsgCreateSet msg) {
			return SimulateMsgCreateSet(msg).ContinueWith(r => {
				return SendMsgCreateSet(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgAddCardToSet sends a MsgAddCardToSet transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgAddCardToSet message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgAddCardToSetResponse>> SendMsgAddCardToSet(MsgAddCardToSet msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddCardToSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgAddCardToSetResponse>(
				r.Result,
				MsgAddCardToSetResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgAddCardToSet simulates a MsgAddCardToSet transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgAddCardToSet message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgAddCardToSet(MsgAddCardToSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddCardToSet"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgAddCardToSet simulates, estimates fees and then sends a AddCardToSet transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgAddCardToSet message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgAddCardToSetResponse>> SimulateAndSendMsgAddCardToSet(MsgAddCardToSet msg) {
			return SimulateMsgAddCardToSet(msg).ContinueWith(r => {
				return SendMsgAddCardToSet(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgFinalizeSet sends a MsgFinalizeSet transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgFinalizeSet message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgFinalizeSetResponse>> SendMsgFinalizeSet(MsgFinalizeSet msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgFinalizeSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgFinalizeSetResponse>(
				r.Result,
				MsgFinalizeSetResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgFinalizeSet simulates a MsgFinalizeSet transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgFinalizeSet message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgFinalizeSet(MsgFinalizeSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgFinalizeSet"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgFinalizeSet simulates, estimates fees and then sends a FinalizeSet transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgFinalizeSet message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgFinalizeSetResponse>> SimulateAndSendMsgFinalizeSet(MsgFinalizeSet msg) {
			return SimulateMsgFinalizeSet(msg).ContinueWith(r => {
				return SendMsgFinalizeSet(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgBuyBoosterPack sends a MsgBuyBoosterPack transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgBuyBoosterPack message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgBuyBoosterPackResponse>> SendMsgBuyBoosterPack(MsgBuyBoosterPack msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyBoosterPack"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgBuyBoosterPackResponse>(
				r.Result,
				MsgBuyBoosterPackResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgBuyBoosterPack simulates a MsgBuyBoosterPack transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgBuyBoosterPack message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgBuyBoosterPack(MsgBuyBoosterPack msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyBoosterPack"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgBuyBoosterPack simulates, estimates fees and then sends a BuyBoosterPack transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgBuyBoosterPack message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgBuyBoosterPackResponse>> SimulateAndSendMsgBuyBoosterPack(MsgBuyBoosterPack msg) {
			return SimulateMsgBuyBoosterPack(msg).ContinueWith(r => {
				return SendMsgBuyBoosterPack(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgRemoveCardFromSet sends a MsgRemoveCardFromSet transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgRemoveCardFromSet message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgRemoveCardFromSetResponse>> SendMsgRemoveCardFromSet(MsgRemoveCardFromSet msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveCardFromSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgRemoveCardFromSetResponse>(
				r.Result,
				MsgRemoveCardFromSetResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgRemoveCardFromSet simulates a MsgRemoveCardFromSet transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgRemoveCardFromSet message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRemoveCardFromSet(MsgRemoveCardFromSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveCardFromSet"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgRemoveCardFromSet simulates, estimates fees and then sends a RemoveCardFromSet transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgRemoveCardFromSet message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgRemoveCardFromSetResponse>> SimulateAndSendMsgRemoveCardFromSet(MsgRemoveCardFromSet msg) {
			return SimulateMsgRemoveCardFromSet(msg).ContinueWith(r => {
				return SendMsgRemoveCardFromSet(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgRemoveContributorFromSet sends a MsgRemoveContributorFromSet transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgRemoveContributorFromSet message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgRemoveContributorFromSetResponse>> SendMsgRemoveContributorFromSet(MsgRemoveContributorFromSet msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveContributorFromSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgRemoveContributorFromSetResponse>(
				r.Result,
				MsgRemoveContributorFromSetResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgRemoveContributorFromSet simulates a MsgRemoveContributorFromSet transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgRemoveContributorFromSet message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRemoveContributorFromSet(MsgRemoveContributorFromSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveContributorFromSet"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgRemoveContributorFromSet simulates, estimates fees and then sends a RemoveContributorFromSet transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgRemoveContributorFromSet message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgRemoveContributorFromSetResponse>> SimulateAndSendMsgRemoveContributorFromSet(MsgRemoveContributorFromSet msg) {
			return SimulateMsgRemoveContributorFromSet(msg).ContinueWith(r => {
				return SendMsgRemoveContributorFromSet(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgAddContributorToSet sends a MsgAddContributorToSet transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgAddContributorToSet message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgAddContributorToSetResponse>> SendMsgAddContributorToSet(MsgAddContributorToSet msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddContributorToSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgAddContributorToSetResponse>(
				r.Result,
				MsgAddContributorToSetResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgAddContributorToSet simulates a MsgAddContributorToSet transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgAddContributorToSet message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgAddContributorToSet(MsgAddContributorToSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddContributorToSet"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgAddContributorToSet simulates, estimates fees and then sends a AddContributorToSet transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgAddContributorToSet message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgAddContributorToSetResponse>> SimulateAndSendMsgAddContributorToSet(MsgAddContributorToSet msg) {
			return SimulateMsgAddContributorToSet(msg).ContinueWith(r => {
				return SendMsgAddContributorToSet(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgCreateSellOffer sends a MsgCreateSellOffer transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgCreateSellOffer message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgCreateSellOfferResponse>> SendMsgCreateSellOffer(MsgCreateSellOffer msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateSellOffer"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgCreateSellOfferResponse>(
				r.Result,
				MsgCreateSellOfferResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgCreateSellOffer simulates a MsgCreateSellOffer transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCreateSellOffer message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgCreateSellOffer(MsgCreateSellOffer msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateSellOffer"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgCreateSellOffer simulates, estimates fees and then sends a CreateSellOffer transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCreateSellOffer message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgCreateSellOfferResponse>> SimulateAndSendMsgCreateSellOffer(MsgCreateSellOffer msg) {
			return SimulateMsgCreateSellOffer(msg).ContinueWith(r => {
				return SendMsgCreateSellOffer(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgBuyCard sends a MsgBuyCard transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgBuyCard message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgBuyCardResponse>> SendMsgBuyCard(MsgBuyCard msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyCard"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgBuyCardResponse>(
				r.Result,
				MsgBuyCardResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgBuyCard simulates a MsgBuyCard transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgBuyCard message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgBuyCard(MsgBuyCard msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyCard"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgBuyCard simulates, estimates fees and then sends a BuyCard transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgBuyCard message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgBuyCardResponse>> SimulateAndSendMsgBuyCard(MsgBuyCard msg) {
			return SimulateMsgBuyCard(msg).ContinueWith(r => {
				return SendMsgBuyCard(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgRemoveSellOffer sends a MsgRemoveSellOffer transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgRemoveSellOffer message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgRemoveSellOfferResponse>> SendMsgRemoveSellOffer(MsgRemoveSellOffer msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveSellOffer"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgRemoveSellOfferResponse>(
				r.Result,
				MsgRemoveSellOfferResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgRemoveSellOffer simulates a MsgRemoveSellOffer transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgRemoveSellOffer message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRemoveSellOffer(MsgRemoveSellOffer msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveSellOffer"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgRemoveSellOffer simulates, estimates fees and then sends a RemoveSellOffer transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgRemoveSellOffer message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgRemoveSellOfferResponse>> SimulateAndSendMsgRemoveSellOffer(MsgRemoveSellOffer msg) {
			return SimulateMsgRemoveSellOffer(msg).ContinueWith(r => {
				return SendMsgRemoveSellOffer(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgAddArtworkToSet sends a MsgAddArtworkToSet transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgAddArtworkToSet message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgAddArtworkToSetResponse>> SendMsgAddArtworkToSet(MsgAddArtworkToSet msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddArtworkToSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgAddArtworkToSetResponse>(
				r.Result,
				MsgAddArtworkToSetResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgAddArtworkToSet simulates a MsgAddArtworkToSet transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgAddArtworkToSet message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgAddArtworkToSet(MsgAddArtworkToSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddArtworkToSet"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgAddArtworkToSet simulates, estimates fees and then sends a AddArtworkToSet transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgAddArtworkToSet message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgAddArtworkToSetResponse>> SimulateAndSendMsgAddArtworkToSet(MsgAddArtworkToSet msg) {
			return SimulateMsgAddArtworkToSet(msg).ContinueWith(r => {
				return SendMsgAddArtworkToSet(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgAddStoryToSet sends a MsgAddStoryToSet transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgAddStoryToSet message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgAddStoryToSetResponse>> SendMsgAddStoryToSet(MsgAddStoryToSet msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddStoryToSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgAddStoryToSetResponse>(
				r.Result,
				MsgAddStoryToSetResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgAddStoryToSet simulates a MsgAddStoryToSet transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgAddStoryToSet message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgAddStoryToSet(MsgAddStoryToSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddStoryToSet"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgAddStoryToSet simulates, estimates fees and then sends a AddStoryToSet transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgAddStoryToSet message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgAddStoryToSetResponse>> SimulateAndSendMsgAddStoryToSet(MsgAddStoryToSet msg) {
			return SimulateMsgAddStoryToSet(msg).ContinueWith(r => {
				return SendMsgAddStoryToSet(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgSetCardRarity sends a MsgSetCardRarity transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgSetCardRarity message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgSetCardRarityResponse>> SendMsgSetCardRarity(MsgSetCardRarity msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetCardRarity"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgSetCardRarityResponse>(
				r.Result,
				MsgSetCardRarityResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgSetCardRarity simulates a MsgSetCardRarity transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetCardRarity message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetCardRarity(MsgSetCardRarity msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetCardRarity"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgSetCardRarity simulates, estimates fees and then sends a SetCardRarity transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetCardRarity message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgSetCardRarityResponse>> SimulateAndSendMsgSetCardRarity(MsgSetCardRarity msg) {
			return SimulateMsgSetCardRarity(msg).ContinueWith(r => {
				return SendMsgSetCardRarity(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgCreateCouncil sends a MsgCreateCouncil transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgCreateCouncil message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgCreateCouncilResponse>> SendMsgCreateCouncil(MsgCreateCouncil msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateCouncil"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgCreateCouncilResponse>(
				r.Result,
				MsgCreateCouncilResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgCreateCouncil simulates a MsgCreateCouncil transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCreateCouncil message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgCreateCouncil(MsgCreateCouncil msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateCouncil"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgCreateCouncil simulates, estimates fees and then sends a CreateCouncil transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCreateCouncil message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgCreateCouncilResponse>> SimulateAndSendMsgCreateCouncil(MsgCreateCouncil msg) {
			return SimulateMsgCreateCouncil(msg).ContinueWith(r => {
				return SendMsgCreateCouncil(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgCommitCouncilResponse sends a MsgCommitCouncilResponse transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgCommitCouncilResponse message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgCommitCouncilResponseResponse>> SendMsgCommitCouncilResponse(MsgCommitCouncilResponse msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCommitCouncilResponse"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgCommitCouncilResponseResponse>(
				r.Result,
				MsgCommitCouncilResponseResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgCommitCouncilResponse simulates a MsgCommitCouncilResponse transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCommitCouncilResponse message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgCommitCouncilResponse(MsgCommitCouncilResponse msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCommitCouncilResponse"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgCommitCouncilResponse simulates, estimates fees and then sends a CommitCouncilResponse transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgCommitCouncilResponse message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgCommitCouncilResponseResponse>> SimulateAndSendMsgCommitCouncilResponse(MsgCommitCouncilResponse msg) {
			return SimulateMsgCommitCouncilResponse(msg).ContinueWith(r => {
				return SendMsgCommitCouncilResponse(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgRevealCouncilResponse sends a MsgRevealCouncilResponse transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgRevealCouncilResponse message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgRevealCouncilResponseResponse>> SendMsgRevealCouncilResponse(MsgRevealCouncilResponse msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRevealCouncilResponse"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgRevealCouncilResponseResponse>(
				r.Result,
				MsgRevealCouncilResponseResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgRevealCouncilResponse simulates a MsgRevealCouncilResponse transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgRevealCouncilResponse message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRevealCouncilResponse(MsgRevealCouncilResponse msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRevealCouncilResponse"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgRevealCouncilResponse simulates, estimates fees and then sends a RevealCouncilResponse transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgRevealCouncilResponse message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgRevealCouncilResponseResponse>> SimulateAndSendMsgRevealCouncilResponse(MsgRevealCouncilResponse msg) {
			return SimulateMsgRevealCouncilResponse(msg).ContinueWith(r => {
				return SendMsgRevealCouncilResponse(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgRestartCouncil sends a MsgRestartCouncil transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgRestartCouncil message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgRestartCouncilResponse>> SendMsgRestartCouncil(MsgRestartCouncil msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRestartCouncil"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgRestartCouncilResponse>(
				r.Result,
				MsgRestartCouncilResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgRestartCouncil simulates a MsgRestartCouncil transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgRestartCouncil message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRestartCouncil(MsgRestartCouncil msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRestartCouncil"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgRestartCouncil simulates, estimates fees and then sends a RestartCouncil transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgRestartCouncil message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgRestartCouncilResponse>> SimulateAndSendMsgRestartCouncil(MsgRestartCouncil msg) {
			return SimulateMsgRestartCouncil(msg).ContinueWith(r => {
				return SendMsgRestartCouncil(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgRewokeCouncilRegistration sends a MsgRewokeCouncilRegistration transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgRewokeCouncilRegistration message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgRewokeCouncilRegistrationResponse>> SendMsgRewokeCouncilRegistration(MsgRewokeCouncilRegistration msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRewokeCouncilRegistration"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgRewokeCouncilRegistrationResponse>(
				r.Result,
				MsgRewokeCouncilRegistrationResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgRewokeCouncilRegistration simulates a MsgRewokeCouncilRegistration transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgRewokeCouncilRegistration message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRewokeCouncilRegistration(MsgRewokeCouncilRegistration msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRewokeCouncilRegistration"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgRewokeCouncilRegistration simulates, estimates fees and then sends a RewokeCouncilRegistration transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgRewokeCouncilRegistration message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgRewokeCouncilRegistrationResponse>> SimulateAndSendMsgRewokeCouncilRegistration(MsgRewokeCouncilRegistration msg) {
			return SimulateMsgRewokeCouncilRegistration(msg).ContinueWith(r => {
				return SendMsgRewokeCouncilRegistration(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgConfirmMatch sends a MsgConfirmMatch transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgConfirmMatch message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgConfirmMatchResponse>> SendMsgConfirmMatch(MsgConfirmMatch msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgConfirmMatch"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgConfirmMatchResponse>(
				r.Result,
				MsgConfirmMatchResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgConfirmMatch simulates a MsgConfirmMatch transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgConfirmMatch message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgConfirmMatch(MsgConfirmMatch msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgConfirmMatch"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgConfirmMatch simulates, estimates fees and then sends a ConfirmMatch transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgConfirmMatch message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgConfirmMatchResponse>> SimulateAndSendMsgConfirmMatch(MsgConfirmMatch msg) {
			return SimulateMsgConfirmMatch(msg).ContinueWith(r => {
				return SendMsgConfirmMatch(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgSetProfileCard sends a MsgSetProfileCard transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgSetProfileCard message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgSetProfileCardResponse>> SendMsgSetProfileCard(MsgSetProfileCard msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetProfileCard"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgSetProfileCardResponse>(
				r.Result,
				MsgSetProfileCardResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgSetProfileCard simulates a MsgSetProfileCard transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetProfileCard message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetProfileCard(MsgSetProfileCard msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetProfileCard"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgSetProfileCard simulates, estimates fees and then sends a SetProfileCard transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetProfileCard message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgSetProfileCardResponse>> SimulateAndSendMsgSetProfileCard(MsgSetProfileCard msg) {
			return SimulateMsgSetProfileCard(msg).ContinueWith(r => {
				return SendMsgSetProfileCard(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgOpenBoosterPack sends a MsgOpenBoosterPack transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgOpenBoosterPack message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgOpenBoosterPackResponse>> SendMsgOpenBoosterPack(MsgOpenBoosterPack msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgOpenBoosterPack"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgOpenBoosterPackResponse>(
				r.Result,
				MsgOpenBoosterPackResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgOpenBoosterPack simulates a MsgOpenBoosterPack transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgOpenBoosterPack message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgOpenBoosterPack(MsgOpenBoosterPack msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgOpenBoosterPack"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgOpenBoosterPack simulates, estimates fees and then sends a OpenBoosterPack transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgOpenBoosterPack message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgOpenBoosterPackResponse>> SimulateAndSendMsgOpenBoosterPack(MsgOpenBoosterPack msg) {
			return SimulateMsgOpenBoosterPack(msg).ContinueWith(r => {
				return SendMsgOpenBoosterPack(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgTransferBoosterPack sends a MsgTransferBoosterPack transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgTransferBoosterPack message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgTransferBoosterPackResponse>> SendMsgTransferBoosterPack(MsgTransferBoosterPack msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgTransferBoosterPack"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgTransferBoosterPackResponse>(
				r.Result,
				MsgTransferBoosterPackResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgTransferBoosterPack simulates a MsgTransferBoosterPack transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgTransferBoosterPack message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgTransferBoosterPack(MsgTransferBoosterPack msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgTransferBoosterPack"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgTransferBoosterPack simulates, estimates fees and then sends a TransferBoosterPack transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgTransferBoosterPack message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgTransferBoosterPackResponse>> SimulateAndSendMsgTransferBoosterPack(MsgTransferBoosterPack msg) {
			return SimulateMsgTransferBoosterPack(msg).ContinueWith(r => {
				return SendMsgTransferBoosterPack(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgSetSetStoryWriter sends a MsgSetSetStoryWriter transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgSetSetStoryWriter message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgSetSetStoryWriterResponse>> SendMsgSetSetStoryWriter(MsgSetSetStoryWriter msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetSetStoryWriter"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgSetSetStoryWriterResponse>(
				r.Result,
				MsgSetSetStoryWriterResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgSetSetStoryWriter simulates a MsgSetSetStoryWriter transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetSetStoryWriter message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetSetStoryWriter(MsgSetSetStoryWriter msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetSetStoryWriter"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgSetSetStoryWriter simulates, estimates fees and then sends a SetSetStoryWriter transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetSetStoryWriter message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgSetSetStoryWriterResponse>> SimulateAndSendMsgSetSetStoryWriter(MsgSetSetStoryWriter msg) {
			return SimulateMsgSetSetStoryWriter(msg).ContinueWith(r => {
				return SendMsgSetSetStoryWriter(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgSetSetArtist sends a MsgSetSetArtist transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgSetSetArtist message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgSetSetArtistResponse>> SendMsgSetSetArtist(MsgSetSetArtist msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetSetArtist"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgSetSetArtistResponse>(
				r.Result,
				MsgSetSetArtistResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgSetSetArtist simulates a MsgSetSetArtist transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetSetArtist message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetSetArtist(MsgSetSetArtist msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetSetArtist"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgSetSetArtist simulates, estimates fees and then sends a SetSetArtist transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetSetArtist message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgSetSetArtistResponse>> SimulateAndSendMsgSetSetArtist(MsgSetSetArtist msg) {
			return SimulateMsgSetSetArtist(msg).ContinueWith(r => {
				return SendMsgSetSetArtist(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgSetUserWebsite sends a MsgSetUserWebsite transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgSetUserWebsite message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgSetUserWebsiteResponse>> SendMsgSetUserWebsite(MsgSetUserWebsite msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetUserWebsite"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgSetUserWebsiteResponse>(
				r.Result,
				MsgSetUserWebsiteResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgSetUserWebsite simulates a MsgSetUserWebsite transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetUserWebsite message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetUserWebsite(MsgSetUserWebsite msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetUserWebsite"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgSetUserWebsite simulates, estimates fees and then sends a SetUserWebsite transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetUserWebsite message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgSetUserWebsiteResponse>> SimulateAndSendMsgSetUserWebsite(MsgSetUserWebsite msg) {
			return SimulateMsgSetUserWebsite(msg).ContinueWith(r => {
				return SendMsgSetUserWebsite(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgSetUserBiography sends a MsgSetUserBiography transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgSetUserBiography message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgSetUserBiographyResponse>> SendMsgSetUserBiography(MsgSetUserBiography msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetUserBiography"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgSetUserBiographyResponse>(
				r.Result,
				MsgSetUserBiographyResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgSetUserBiography simulates a MsgSetUserBiography transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetUserBiography message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetUserBiography(MsgSetUserBiography msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetUserBiography"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgSetUserBiography simulates, estimates fees and then sends a SetUserBiography transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetUserBiography message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgSetUserBiographyResponse>> SimulateAndSendMsgSetUserBiography(MsgSetUserBiography msg) {
			return SimulateMsgSetUserBiography(msg).ContinueWith(r => {
				return SendMsgSetUserBiography(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgMultiVoteCard sends a MsgMultiVoteCard transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgMultiVoteCard message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgMultiVoteCardResponse>> SendMsgMultiVoteCard(MsgMultiVoteCard msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgMultiVoteCard"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgMultiVoteCardResponse>(
				r.Result,
				MsgMultiVoteCardResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgMultiVoteCard simulates a MsgMultiVoteCard transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgMultiVoteCard message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgMultiVoteCard(MsgMultiVoteCard msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgMultiVoteCard"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgMultiVoteCard simulates, estimates fees and then sends a MultiVoteCard transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgMultiVoteCard message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgMultiVoteCardResponse>> SimulateAndSendMsgMultiVoteCard(MsgMultiVoteCard msg) {
			return SimulateMsgMultiVoteCard(msg).ContinueWith(r => {
				return SendMsgMultiVoteCard(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgOpenMatch sends a MsgOpenMatch transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgOpenMatch message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgOpenMatchResponse>> SendMsgOpenMatch(MsgOpenMatch msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgOpenMatch"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgOpenMatchResponse>(
				r.Result,
				MsgOpenMatchResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgOpenMatch simulates a MsgOpenMatch transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgOpenMatch message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgOpenMatch(MsgOpenMatch msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgOpenMatch"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgOpenMatch simulates, estimates fees and then sends a OpenMatch transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgOpenMatch message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgOpenMatchResponse>> SimulateAndSendMsgOpenMatch(MsgOpenMatch msg) {
			return SimulateMsgOpenMatch(msg).ContinueWith(r => {
				return SendMsgOpenMatch(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgSetSetName sends a MsgSetSetName transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgSetSetName message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgSetSetNameResponse>> SendMsgSetSetName(MsgSetSetName msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetSetName"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgSetSetNameResponse>(
				r.Result,
				MsgSetSetNameResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgSetSetName simulates a MsgSetSetName transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetSetName message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetSetName(MsgSetSetName msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetSetName"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgSetSetName simulates, estimates fees and then sends a SetSetName transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgSetSetName message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgSetSetNameResponse>> SimulateAndSendMsgSetSetName(MsgSetSetName msg) {
			return SimulateMsgSetSetName(msg).ContinueWith(r => {
				return SendMsgSetSetName(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgChangeAlias sends a MsgChangeAlias transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgChangeAlias message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgChangeAliasResponse>> SendMsgChangeAlias(MsgChangeAlias msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgChangeAlias"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgChangeAliasResponse>(
				r.Result,
				MsgChangeAliasResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgChangeAlias simulates a MsgChangeAlias transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgChangeAlias message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgChangeAlias(MsgChangeAlias msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgChangeAlias"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgChangeAlias simulates, estimates fees and then sends a ChangeAlias transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgChangeAlias message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgChangeAliasResponse>> SimulateAndSendMsgChangeAlias(MsgChangeAlias msg) {
			return SimulateMsgChangeAlias(msg).ContinueWith(r => {
				return SendMsgChangeAlias(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgInviteEarlyAccess sends a MsgInviteEarlyAccess transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgInviteEarlyAccess message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgInviteEarlyAccessResponse>> SendMsgInviteEarlyAccess(MsgInviteEarlyAccess msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgInviteEarlyAccess"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgInviteEarlyAccessResponse>(
				r.Result,
				MsgInviteEarlyAccessResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgInviteEarlyAccess simulates a MsgInviteEarlyAccess transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgInviteEarlyAccess message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgInviteEarlyAccess(MsgInviteEarlyAccess msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgInviteEarlyAccess"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgInviteEarlyAccess simulates, estimates fees and then sends a InviteEarlyAccess transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgInviteEarlyAccess message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgInviteEarlyAccessResponse>> SimulateAndSendMsgInviteEarlyAccess(MsgInviteEarlyAccess msg) {
			return SimulateMsgInviteEarlyAccess(msg).ContinueWith(r => {
				return SendMsgInviteEarlyAccess(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgDisinviteEarlyAccess sends a MsgDisinviteEarlyAccess transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgDisinviteEarlyAccess message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgDisinviteEarlyAccessResponse>> SendMsgDisinviteEarlyAccess(MsgDisinviteEarlyAccess msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgDisinviteEarlyAccess"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgDisinviteEarlyAccessResponse>(
				r.Result,
				MsgDisinviteEarlyAccessResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgDisinviteEarlyAccess simulates a MsgDisinviteEarlyAccess transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgDisinviteEarlyAccess message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgDisinviteEarlyAccess(MsgDisinviteEarlyAccess msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgDisinviteEarlyAccess"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgDisinviteEarlyAccess simulates, estimates fees and then sends a DisinviteEarlyAccess transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgDisinviteEarlyAccess message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgDisinviteEarlyAccessResponse>> SimulateAndSendMsgDisinviteEarlyAccess(MsgDisinviteEarlyAccess msg) {
			return SimulateMsgDisinviteEarlyAccess(msg).ContinueWith(r => {
				return SendMsgDisinviteEarlyAccess(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgConnectZealyAccount sends a MsgConnectZealyAccount transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgConnectZealyAccount message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgConnectZealyAccountResponse>> SendMsgConnectZealyAccount(MsgConnectZealyAccount msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgConnectZealyAccount"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgConnectZealyAccountResponse>(
				r.Result,
				MsgConnectZealyAccountResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgConnectZealyAccount simulates a MsgConnectZealyAccount transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgConnectZealyAccount message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgConnectZealyAccount(MsgConnectZealyAccount msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgConnectZealyAccount"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgConnectZealyAccount simulates, estimates fees and then sends a ConnectZealyAccount transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgConnectZealyAccount message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgConnectZealyAccountResponse>> SimulateAndSendMsgConnectZealyAccount(MsgConnectZealyAccount msg) {
			return SimulateMsgConnectZealyAccount(msg).ContinueWith(r => {
				return SendMsgConnectZealyAccount(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgEncounterCreate sends a MsgEncounterCreate transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgEncounterCreate message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgEncounterCreateResponse>> SendMsgEncounterCreate(MsgEncounterCreate msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgEncounterCreate"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgEncounterCreateResponse>(
				r.Result,
				MsgEncounterCreateResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgEncounterCreate simulates a MsgEncounterCreate transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgEncounterCreate message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgEncounterCreate(MsgEncounterCreate msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgEncounterCreate"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgEncounterCreate simulates, estimates fees and then sends a EncounterCreate transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgEncounterCreate message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgEncounterCreateResponse>> SimulateAndSendMsgEncounterCreate(MsgEncounterCreate msg) {
			return SimulateMsgEncounterCreate(msg).ContinueWith(r => {
				return SendMsgEncounterCreate(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgEncounterDo sends a MsgEncounterDo transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgEncounterDo message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgEncounterDoResponse>> SendMsgEncounterDo(MsgEncounterDo msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgEncounterDo"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgEncounterDoResponse>(
				r.Result,
				MsgEncounterDoResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgEncounterDo simulates a MsgEncounterDo transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgEncounterDo message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgEncounterDo(MsgEncounterDo msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgEncounterDo"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgEncounterDo simulates, estimates fees and then sends a EncounterDo transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgEncounterDo message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgEncounterDoResponse>> SimulateAndSendMsgEncounterDo(MsgEncounterDo msg) {
			return SimulateMsgEncounterDo(msg).ContinueWith(r => {
				return SendMsgEncounterDo(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        /// <summary>
      	/// SendMsgEncounterClose sends a MsgEncounterClose transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The MsgEncounterClose message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<MsgEncounterCloseResponse>> SendMsgEncounterClose(MsgEncounterClose msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgEncounterClose"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<MsgEncounterCloseResponse>(
				r.Result,
				MsgEncounterCloseResponse.Parser
			));
		}

		/// <summary>
      	/// SimulateMsgEncounterClose simulates a MsgEncounterClose transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgEncounterClose message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgEncounterClose(MsgEncounterClose msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgEncounterClose"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsgEncounterClose simulates, estimates fees and then sends a EncounterClose transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The MsgEncounterClose message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<MsgEncounterCloseResponse>> SimulateAndSendMsgEncounterClose(MsgEncounterClose msg) {
			return SimulateMsgEncounterClose(msg).ContinueWith(r => {
				return SendMsgEncounterClose(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
	}
	
}
