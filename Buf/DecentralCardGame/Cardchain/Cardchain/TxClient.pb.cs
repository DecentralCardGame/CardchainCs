// <auto-generated>
//    Code generated by protoc-gen-cosmosCsharp plugin.  DO NOT EDIT!
//    The plugin is part of the DecentralCardgame project and written by lxgr@protonmail.com
// </auto-generated>
#nullable enable

using System;
using Cosmcs.Client;
using Cosmcs.Tx;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace DecentralCardGame.Cardchain.Cardchain {
	
	public class MsgClient {
		public IClient Client { get; }

		public MsgClient (IClient client) {
			Client = client;
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCreateuserResponse>> SendMsgCreateuser(DecentralCardGame.Cardchain.Cardchain.MsgCreateuser msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateuser"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCreateuserResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgCreateuserResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgCreateuser(DecentralCardGame.Cardchain.Cardchain.MsgCreateuser msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateuser"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCreateuserResponse>> SimulateAndSendMsgCreateuser(DecentralCardGame.Cardchain.Cardchain.MsgCreateuser msg) {
			return SimulateMsgCreateuser(msg).ContinueWith(r => {
				return SendMsgCreateuser(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgBuyCardSchemeResponse>> SendMsgBuyCardScheme(DecentralCardGame.Cardchain.Cardchain.MsgBuyCardScheme msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyCardScheme"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgBuyCardSchemeResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgBuyCardSchemeResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgBuyCardScheme(DecentralCardGame.Cardchain.Cardchain.MsgBuyCardScheme msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyCardScheme"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgBuyCardSchemeResponse>> SimulateAndSendMsgBuyCardScheme(DecentralCardGame.Cardchain.Cardchain.MsgBuyCardScheme msg) {
			return SimulateMsgBuyCardScheme(msg).ContinueWith(r => {
				return SendMsgBuyCardScheme(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgVoteCardResponse>> SendMsgVoteCard(DecentralCardGame.Cardchain.Cardchain.MsgVoteCard msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgVoteCard"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgVoteCardResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgVoteCardResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgVoteCard(DecentralCardGame.Cardchain.Cardchain.MsgVoteCard msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgVoteCard"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgVoteCardResponse>> SimulateAndSendMsgVoteCard(DecentralCardGame.Cardchain.Cardchain.MsgVoteCard msg) {
			return SimulateMsgVoteCard(msg).ContinueWith(r => {
				return SendMsgVoteCard(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSaveCardContentResponse>> SendMsgSaveCardContent(DecentralCardGame.Cardchain.Cardchain.MsgSaveCardContent msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSaveCardContent"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSaveCardContentResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgSaveCardContentResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSaveCardContent(DecentralCardGame.Cardchain.Cardchain.MsgSaveCardContent msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSaveCardContent"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSaveCardContentResponse>> SimulateAndSendMsgSaveCardContent(DecentralCardGame.Cardchain.Cardchain.MsgSaveCardContent msg) {
			return SimulateMsgSaveCardContent(msg).ContinueWith(r => {
				return SendMsgSaveCardContent(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgTransferCardResponse>> SendMsgTransferCard(DecentralCardGame.Cardchain.Cardchain.MsgTransferCard msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgTransferCard"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgTransferCardResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgTransferCardResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgTransferCard(DecentralCardGame.Cardchain.Cardchain.MsgTransferCard msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgTransferCard"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgTransferCardResponse>> SimulateAndSendMsgTransferCard(DecentralCardGame.Cardchain.Cardchain.MsgTransferCard msg) {
			return SimulateMsgTransferCard(msg).ContinueWith(r => {
				return SendMsgTransferCard(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgDonateToCardResponse>> SendMsgDonateToCard(DecentralCardGame.Cardchain.Cardchain.MsgDonateToCard msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgDonateToCard"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgDonateToCardResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgDonateToCardResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgDonateToCard(DecentralCardGame.Cardchain.Cardchain.MsgDonateToCard msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgDonateToCard"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgDonateToCardResponse>> SimulateAndSendMsgDonateToCard(DecentralCardGame.Cardchain.Cardchain.MsgDonateToCard msg) {
			return SimulateMsgDonateToCard(msg).ContinueWith(r => {
				return SendMsgDonateToCard(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddArtworkResponse>> SendMsgAddArtwork(DecentralCardGame.Cardchain.Cardchain.MsgAddArtwork msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddArtwork"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddArtworkResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgAddArtworkResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgAddArtwork(DecentralCardGame.Cardchain.Cardchain.MsgAddArtwork msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddArtwork"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddArtworkResponse>> SimulateAndSendMsgAddArtwork(DecentralCardGame.Cardchain.Cardchain.MsgAddArtwork msg) {
			return SimulateMsgAddArtwork(msg).ContinueWith(r => {
				return SendMsgAddArtwork(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgChangeArtistResponse>> SendMsgChangeArtist(DecentralCardGame.Cardchain.Cardchain.MsgChangeArtist msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgChangeArtist"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgChangeArtistResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgChangeArtistResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgChangeArtist(DecentralCardGame.Cardchain.Cardchain.MsgChangeArtist msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgChangeArtist"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgChangeArtistResponse>> SimulateAndSendMsgChangeArtist(DecentralCardGame.Cardchain.Cardchain.MsgChangeArtist msg) {
			return SimulateMsgChangeArtist(msg).ContinueWith(r => {
				return SendMsgChangeArtist(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRegisterForCouncilResponse>> SendMsgRegisterForCouncil(DecentralCardGame.Cardchain.Cardchain.MsgRegisterForCouncil msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRegisterForCouncil"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRegisterForCouncilResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgRegisterForCouncilResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRegisterForCouncil(DecentralCardGame.Cardchain.Cardchain.MsgRegisterForCouncil msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRegisterForCouncil"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRegisterForCouncilResponse>> SimulateAndSendMsgRegisterForCouncil(DecentralCardGame.Cardchain.Cardchain.MsgRegisterForCouncil msg) {
			return SimulateMsgRegisterForCouncil(msg).ContinueWith(r => {
				return SendMsgRegisterForCouncil(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgReportMatchResponse>> SendMsgReportMatch(DecentralCardGame.Cardchain.Cardchain.MsgReportMatch msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgReportMatch"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgReportMatchResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgReportMatchResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgReportMatch(DecentralCardGame.Cardchain.Cardchain.MsgReportMatch msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgReportMatch"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgReportMatchResponse>> SimulateAndSendMsgReportMatch(DecentralCardGame.Cardchain.Cardchain.MsgReportMatch msg) {
			return SimulateMsgReportMatch(msg).ContinueWith(r => {
				return SendMsgReportMatch(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgApointMatchReporterResponse>> SendMsgApointMatchReporter(DecentralCardGame.Cardchain.Cardchain.MsgApointMatchReporter msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgApointMatchReporter"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgApointMatchReporterResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgApointMatchReporterResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgApointMatchReporter(DecentralCardGame.Cardchain.Cardchain.MsgApointMatchReporter msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgApointMatchReporter"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgApointMatchReporterResponse>> SimulateAndSendMsgApointMatchReporter(DecentralCardGame.Cardchain.Cardchain.MsgApointMatchReporter msg) {
			return SimulateMsgApointMatchReporter(msg).ContinueWith(r => {
				return SendMsgApointMatchReporter(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCreateSetResponse>> SendMsgCreateSet(DecentralCardGame.Cardchain.Cardchain.MsgCreateSet msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCreateSetResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgCreateSetResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgCreateSet(DecentralCardGame.Cardchain.Cardchain.MsgCreateSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateSet"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCreateSetResponse>> SimulateAndSendMsgCreateSet(DecentralCardGame.Cardchain.Cardchain.MsgCreateSet msg) {
			return SimulateMsgCreateSet(msg).ContinueWith(r => {
				return SendMsgCreateSet(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddCardToSetResponse>> SendMsgAddCardToSet(DecentralCardGame.Cardchain.Cardchain.MsgAddCardToSet msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddCardToSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddCardToSetResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgAddCardToSetResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgAddCardToSet(DecentralCardGame.Cardchain.Cardchain.MsgAddCardToSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddCardToSet"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddCardToSetResponse>> SimulateAndSendMsgAddCardToSet(DecentralCardGame.Cardchain.Cardchain.MsgAddCardToSet msg) {
			return SimulateMsgAddCardToSet(msg).ContinueWith(r => {
				return SendMsgAddCardToSet(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgFinalizeSetResponse>> SendMsgFinalizeSet(DecentralCardGame.Cardchain.Cardchain.MsgFinalizeSet msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgFinalizeSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgFinalizeSetResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgFinalizeSetResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgFinalizeSet(DecentralCardGame.Cardchain.Cardchain.MsgFinalizeSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgFinalizeSet"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgFinalizeSetResponse>> SimulateAndSendMsgFinalizeSet(DecentralCardGame.Cardchain.Cardchain.MsgFinalizeSet msg) {
			return SimulateMsgFinalizeSet(msg).ContinueWith(r => {
				return SendMsgFinalizeSet(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgBuyBoosterPackResponse>> SendMsgBuyBoosterPack(DecentralCardGame.Cardchain.Cardchain.MsgBuyBoosterPack msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyBoosterPack"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgBuyBoosterPackResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgBuyBoosterPackResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgBuyBoosterPack(DecentralCardGame.Cardchain.Cardchain.MsgBuyBoosterPack msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyBoosterPack"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgBuyBoosterPackResponse>> SimulateAndSendMsgBuyBoosterPack(DecentralCardGame.Cardchain.Cardchain.MsgBuyBoosterPack msg) {
			return SimulateMsgBuyBoosterPack(msg).ContinueWith(r => {
				return SendMsgBuyBoosterPack(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRemoveCardFromSetResponse>> SendMsgRemoveCardFromSet(DecentralCardGame.Cardchain.Cardchain.MsgRemoveCardFromSet msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveCardFromSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRemoveCardFromSetResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgRemoveCardFromSetResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRemoveCardFromSet(DecentralCardGame.Cardchain.Cardchain.MsgRemoveCardFromSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveCardFromSet"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRemoveCardFromSetResponse>> SimulateAndSendMsgRemoveCardFromSet(DecentralCardGame.Cardchain.Cardchain.MsgRemoveCardFromSet msg) {
			return SimulateMsgRemoveCardFromSet(msg).ContinueWith(r => {
				return SendMsgRemoveCardFromSet(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRemoveContributorFromSetResponse>> SendMsgRemoveContributorFromSet(DecentralCardGame.Cardchain.Cardchain.MsgRemoveContributorFromSet msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveContributorFromSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRemoveContributorFromSetResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgRemoveContributorFromSetResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRemoveContributorFromSet(DecentralCardGame.Cardchain.Cardchain.MsgRemoveContributorFromSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveContributorFromSet"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRemoveContributorFromSetResponse>> SimulateAndSendMsgRemoveContributorFromSet(DecentralCardGame.Cardchain.Cardchain.MsgRemoveContributorFromSet msg) {
			return SimulateMsgRemoveContributorFromSet(msg).ContinueWith(r => {
				return SendMsgRemoveContributorFromSet(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddContributorToSetResponse>> SendMsgAddContributorToSet(DecentralCardGame.Cardchain.Cardchain.MsgAddContributorToSet msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddContributorToSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddContributorToSetResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgAddContributorToSetResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgAddContributorToSet(DecentralCardGame.Cardchain.Cardchain.MsgAddContributorToSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddContributorToSet"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddContributorToSetResponse>> SimulateAndSendMsgAddContributorToSet(DecentralCardGame.Cardchain.Cardchain.MsgAddContributorToSet msg) {
			return SimulateMsgAddContributorToSet(msg).ContinueWith(r => {
				return SendMsgAddContributorToSet(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCreateSellOfferResponse>> SendMsgCreateSellOffer(DecentralCardGame.Cardchain.Cardchain.MsgCreateSellOffer msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateSellOffer"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCreateSellOfferResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgCreateSellOfferResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgCreateSellOffer(DecentralCardGame.Cardchain.Cardchain.MsgCreateSellOffer msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateSellOffer"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCreateSellOfferResponse>> SimulateAndSendMsgCreateSellOffer(DecentralCardGame.Cardchain.Cardchain.MsgCreateSellOffer msg) {
			return SimulateMsgCreateSellOffer(msg).ContinueWith(r => {
				return SendMsgCreateSellOffer(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgBuyCardResponse>> SendMsgBuyCard(DecentralCardGame.Cardchain.Cardchain.MsgBuyCard msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyCard"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgBuyCardResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgBuyCardResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgBuyCard(DecentralCardGame.Cardchain.Cardchain.MsgBuyCard msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyCard"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgBuyCardResponse>> SimulateAndSendMsgBuyCard(DecentralCardGame.Cardchain.Cardchain.MsgBuyCard msg) {
			return SimulateMsgBuyCard(msg).ContinueWith(r => {
				return SendMsgBuyCard(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRemoveSellOfferResponse>> SendMsgRemoveSellOffer(DecentralCardGame.Cardchain.Cardchain.MsgRemoveSellOffer msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveSellOffer"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRemoveSellOfferResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgRemoveSellOfferResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRemoveSellOffer(DecentralCardGame.Cardchain.Cardchain.MsgRemoveSellOffer msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveSellOffer"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRemoveSellOfferResponse>> SimulateAndSendMsgRemoveSellOffer(DecentralCardGame.Cardchain.Cardchain.MsgRemoveSellOffer msg) {
			return SimulateMsgRemoveSellOffer(msg).ContinueWith(r => {
				return SendMsgRemoveSellOffer(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddArtworkToSetResponse>> SendMsgAddArtworkToSet(DecentralCardGame.Cardchain.Cardchain.MsgAddArtworkToSet msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddArtworkToSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddArtworkToSetResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgAddArtworkToSetResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgAddArtworkToSet(DecentralCardGame.Cardchain.Cardchain.MsgAddArtworkToSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddArtworkToSet"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddArtworkToSetResponse>> SimulateAndSendMsgAddArtworkToSet(DecentralCardGame.Cardchain.Cardchain.MsgAddArtworkToSet msg) {
			return SimulateMsgAddArtworkToSet(msg).ContinueWith(r => {
				return SendMsgAddArtworkToSet(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddStoryToSetResponse>> SendMsgAddStoryToSet(DecentralCardGame.Cardchain.Cardchain.MsgAddStoryToSet msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddStoryToSet"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddStoryToSetResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgAddStoryToSetResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgAddStoryToSet(DecentralCardGame.Cardchain.Cardchain.MsgAddStoryToSet msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddStoryToSet"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgAddStoryToSetResponse>> SimulateAndSendMsgAddStoryToSet(DecentralCardGame.Cardchain.Cardchain.MsgAddStoryToSet msg) {
			return SimulateMsgAddStoryToSet(msg).ContinueWith(r => {
				return SendMsgAddStoryToSet(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetCardRarityResponse>> SendMsgSetCardRarity(DecentralCardGame.Cardchain.Cardchain.MsgSetCardRarity msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetCardRarity"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetCardRarityResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgSetCardRarityResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetCardRarity(DecentralCardGame.Cardchain.Cardchain.MsgSetCardRarity msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetCardRarity"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetCardRarityResponse>> SimulateAndSendMsgSetCardRarity(DecentralCardGame.Cardchain.Cardchain.MsgSetCardRarity msg) {
			return SimulateMsgSetCardRarity(msg).ContinueWith(r => {
				return SendMsgSetCardRarity(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCreateCouncilResponse>> SendMsgCreateCouncil(DecentralCardGame.Cardchain.Cardchain.MsgCreateCouncil msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateCouncil"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCreateCouncilResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgCreateCouncilResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgCreateCouncil(DecentralCardGame.Cardchain.Cardchain.MsgCreateCouncil msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateCouncil"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCreateCouncilResponse>> SimulateAndSendMsgCreateCouncil(DecentralCardGame.Cardchain.Cardchain.MsgCreateCouncil msg) {
			return SimulateMsgCreateCouncil(msg).ContinueWith(r => {
				return SendMsgCreateCouncil(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCommitCouncilResponseResponse>> SendMsgCommitCouncilResponse(DecentralCardGame.Cardchain.Cardchain.MsgCommitCouncilResponse msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCommitCouncilResponse"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCommitCouncilResponseResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgCommitCouncilResponseResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgCommitCouncilResponse(DecentralCardGame.Cardchain.Cardchain.MsgCommitCouncilResponse msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCommitCouncilResponse"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgCommitCouncilResponseResponse>> SimulateAndSendMsgCommitCouncilResponse(DecentralCardGame.Cardchain.Cardchain.MsgCommitCouncilResponse msg) {
			return SimulateMsgCommitCouncilResponse(msg).ContinueWith(r => {
				return SendMsgCommitCouncilResponse(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRevealCouncilResponseResponse>> SendMsgRevealCouncilResponse(DecentralCardGame.Cardchain.Cardchain.MsgRevealCouncilResponse msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRevealCouncilResponse"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRevealCouncilResponseResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgRevealCouncilResponseResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRevealCouncilResponse(DecentralCardGame.Cardchain.Cardchain.MsgRevealCouncilResponse msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRevealCouncilResponse"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRevealCouncilResponseResponse>> SimulateAndSendMsgRevealCouncilResponse(DecentralCardGame.Cardchain.Cardchain.MsgRevealCouncilResponse msg) {
			return SimulateMsgRevealCouncilResponse(msg).ContinueWith(r => {
				return SendMsgRevealCouncilResponse(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRestartCouncilResponse>> SendMsgRestartCouncil(DecentralCardGame.Cardchain.Cardchain.MsgRestartCouncil msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRestartCouncil"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRestartCouncilResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgRestartCouncilResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRestartCouncil(DecentralCardGame.Cardchain.Cardchain.MsgRestartCouncil msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRestartCouncil"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRestartCouncilResponse>> SimulateAndSendMsgRestartCouncil(DecentralCardGame.Cardchain.Cardchain.MsgRestartCouncil msg) {
			return SimulateMsgRestartCouncil(msg).ContinueWith(r => {
				return SendMsgRestartCouncil(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRewokeCouncilRegistrationResponse>> SendMsgRewokeCouncilRegistration(DecentralCardGame.Cardchain.Cardchain.MsgRewokeCouncilRegistration msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRewokeCouncilRegistration"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRewokeCouncilRegistrationResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgRewokeCouncilRegistrationResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgRewokeCouncilRegistration(DecentralCardGame.Cardchain.Cardchain.MsgRewokeCouncilRegistration msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRewokeCouncilRegistration"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgRewokeCouncilRegistrationResponse>> SimulateAndSendMsgRewokeCouncilRegistration(DecentralCardGame.Cardchain.Cardchain.MsgRewokeCouncilRegistration msg) {
			return SimulateMsgRewokeCouncilRegistration(msg).ContinueWith(r => {
				return SendMsgRewokeCouncilRegistration(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgConfirmMatchResponse>> SendMsgConfirmMatch(DecentralCardGame.Cardchain.Cardchain.MsgConfirmMatch msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgConfirmMatch"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgConfirmMatchResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgConfirmMatchResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgConfirmMatch(DecentralCardGame.Cardchain.Cardchain.MsgConfirmMatch msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgConfirmMatch"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgConfirmMatchResponse>> SimulateAndSendMsgConfirmMatch(DecentralCardGame.Cardchain.Cardchain.MsgConfirmMatch msg) {
			return SimulateMsgConfirmMatch(msg).ContinueWith(r => {
				return SendMsgConfirmMatch(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetProfileCardResponse>> SendMsgSetProfileCard(DecentralCardGame.Cardchain.Cardchain.MsgSetProfileCard msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetProfileCard"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetProfileCardResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgSetProfileCardResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetProfileCard(DecentralCardGame.Cardchain.Cardchain.MsgSetProfileCard msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetProfileCard"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetProfileCardResponse>> SimulateAndSendMsgSetProfileCard(DecentralCardGame.Cardchain.Cardchain.MsgSetProfileCard msg) {
			return SimulateMsgSetProfileCard(msg).ContinueWith(r => {
				return SendMsgSetProfileCard(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgOpenBoosterPackResponse>> SendMsgOpenBoosterPack(DecentralCardGame.Cardchain.Cardchain.MsgOpenBoosterPack msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgOpenBoosterPack"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgOpenBoosterPackResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgOpenBoosterPackResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgOpenBoosterPack(DecentralCardGame.Cardchain.Cardchain.MsgOpenBoosterPack msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgOpenBoosterPack"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgOpenBoosterPackResponse>> SimulateAndSendMsgOpenBoosterPack(DecentralCardGame.Cardchain.Cardchain.MsgOpenBoosterPack msg) {
			return SimulateMsgOpenBoosterPack(msg).ContinueWith(r => {
				return SendMsgOpenBoosterPack(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgTransferBoosterPackResponse>> SendMsgTransferBoosterPack(DecentralCardGame.Cardchain.Cardchain.MsgTransferBoosterPack msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgTransferBoosterPack"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgTransferBoosterPackResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgTransferBoosterPackResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgTransferBoosterPack(DecentralCardGame.Cardchain.Cardchain.MsgTransferBoosterPack msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgTransferBoosterPack"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgTransferBoosterPackResponse>> SimulateAndSendMsgTransferBoosterPack(DecentralCardGame.Cardchain.Cardchain.MsgTransferBoosterPack msg) {
			return SimulateMsgTransferBoosterPack(msg).ContinueWith(r => {
				return SendMsgTransferBoosterPack(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetSetStoryWriterResponse>> SendMsgSetSetStoryWriter(DecentralCardGame.Cardchain.Cardchain.MsgSetSetStoryWriter msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetSetStoryWriter"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetSetStoryWriterResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgSetSetStoryWriterResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetSetStoryWriter(DecentralCardGame.Cardchain.Cardchain.MsgSetSetStoryWriter msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetSetStoryWriter"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetSetStoryWriterResponse>> SimulateAndSendMsgSetSetStoryWriter(DecentralCardGame.Cardchain.Cardchain.MsgSetSetStoryWriter msg) {
			return SimulateMsgSetSetStoryWriter(msg).ContinueWith(r => {
				return SendMsgSetSetStoryWriter(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetSetArtistResponse>> SendMsgSetSetArtist(DecentralCardGame.Cardchain.Cardchain.MsgSetSetArtist msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetSetArtist"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetSetArtistResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgSetSetArtistResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetSetArtist(DecentralCardGame.Cardchain.Cardchain.MsgSetSetArtist msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetSetArtist"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetSetArtistResponse>> SimulateAndSendMsgSetSetArtist(DecentralCardGame.Cardchain.Cardchain.MsgSetSetArtist msg) {
			return SimulateMsgSetSetArtist(msg).ContinueWith(r => {
				return SendMsgSetSetArtist(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetUserWebsiteResponse>> SendMsgSetUserWebsite(DecentralCardGame.Cardchain.Cardchain.MsgSetUserWebsite msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetUserWebsite"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetUserWebsiteResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgSetUserWebsiteResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetUserWebsite(DecentralCardGame.Cardchain.Cardchain.MsgSetUserWebsite msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetUserWebsite"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetUserWebsiteResponse>> SimulateAndSendMsgSetUserWebsite(DecentralCardGame.Cardchain.Cardchain.MsgSetUserWebsite msg) {
			return SimulateMsgSetUserWebsite(msg).ContinueWith(r => {
				return SendMsgSetUserWebsite(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetUserBiographyResponse>> SendMsgSetUserBiography(DecentralCardGame.Cardchain.Cardchain.MsgSetUserBiography msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetUserBiography"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetUserBiographyResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgSetUserBiographyResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetUserBiography(DecentralCardGame.Cardchain.Cardchain.MsgSetUserBiography msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetUserBiography"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetUserBiographyResponse>> SimulateAndSendMsgSetUserBiography(DecentralCardGame.Cardchain.Cardchain.MsgSetUserBiography msg) {
			return SimulateMsgSetUserBiography(msg).ContinueWith(r => {
				return SendMsgSetUserBiography(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgMultiVoteCardResponse>> SendMsgMultiVoteCard(DecentralCardGame.Cardchain.Cardchain.MsgMultiVoteCard msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgMultiVoteCard"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgMultiVoteCardResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgMultiVoteCardResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgMultiVoteCard(DecentralCardGame.Cardchain.Cardchain.MsgMultiVoteCard msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgMultiVoteCard"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgMultiVoteCardResponse>> SimulateAndSendMsgMultiVoteCard(DecentralCardGame.Cardchain.Cardchain.MsgMultiVoteCard msg) {
			return SimulateMsgMultiVoteCard(msg).ContinueWith(r => {
				return SendMsgMultiVoteCard(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgOpenMatchResponse>> SendMsgOpenMatch(DecentralCardGame.Cardchain.Cardchain.MsgOpenMatch msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgOpenMatch"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgOpenMatchResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgOpenMatchResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgOpenMatch(DecentralCardGame.Cardchain.Cardchain.MsgOpenMatch msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgOpenMatch"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgOpenMatchResponse>> SimulateAndSendMsgOpenMatch(DecentralCardGame.Cardchain.Cardchain.MsgOpenMatch msg) {
			return SimulateMsgOpenMatch(msg).ContinueWith(r => {
				return SendMsgOpenMatch(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetSetNameResponse>> SendMsgSetSetName(DecentralCardGame.Cardchain.Cardchain.MsgSetSetName msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetSetName"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetSetNameResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgSetSetNameResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgSetSetName(DecentralCardGame.Cardchain.Cardchain.MsgSetSetName msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetSetName"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgSetSetNameResponse>> SimulateAndSendMsgSetSetName(DecentralCardGame.Cardchain.Cardchain.MsgSetSetName msg) {
			return SimulateMsgSetSetName(msg).ContinueWith(r => {
				return SendMsgSetSetName(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgChangeAliasResponse>> SendMsgChangeAlias(DecentralCardGame.Cardchain.Cardchain.MsgChangeAlias msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgChangeAlias"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgChangeAliasResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgChangeAliasResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgChangeAlias(DecentralCardGame.Cardchain.Cardchain.MsgChangeAlias msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgChangeAlias"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgChangeAliasResponse>> SimulateAndSendMsgChangeAlias(DecentralCardGame.Cardchain.Cardchain.MsgChangeAlias msg) {
			return SimulateMsgChangeAlias(msg).ContinueWith(r => {
				return SendMsgChangeAlias(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgInviteEarlyAccessResponse>> SendMsgInviteEarlyAccess(DecentralCardGame.Cardchain.Cardchain.MsgInviteEarlyAccess msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgInviteEarlyAccess"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgInviteEarlyAccessResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgInviteEarlyAccessResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgInviteEarlyAccess(DecentralCardGame.Cardchain.Cardchain.MsgInviteEarlyAccess msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgInviteEarlyAccess"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgInviteEarlyAccessResponse>> SimulateAndSendMsgInviteEarlyAccess(DecentralCardGame.Cardchain.Cardchain.MsgInviteEarlyAccess msg) {
			return SimulateMsgInviteEarlyAccess(msg).ContinueWith(r => {
				return SendMsgInviteEarlyAccess(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
        public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgDisinviteEarlyAccessResponse>> SendMsgDisinviteEarlyAccess(DecentralCardGame.Cardchain.Cardchain.MsgDisinviteEarlyAccess msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgDisinviteEarlyAccess"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgDisinviteEarlyAccessResponse>(
				r.Result,
				DecentralCardGame.Cardchain.Cardchain.MsgDisinviteEarlyAccessResponse.Parser
			));
		}

		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsgDisinviteEarlyAccess(DecentralCardGame.Cardchain.Cardchain.MsgDisinviteEarlyAccess msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgDisinviteEarlyAccess"
				}}
			);
		}

		public Task<Cosmcs.Client.ClientResponse<DecentralCardGame.Cardchain.Cardchain.MsgDisinviteEarlyAccessResponse>> SimulateAndSendMsgDisinviteEarlyAccess(DecentralCardGame.Cardchain.Cardchain.MsgDisinviteEarlyAccess msg) {
			return SimulateMsgDisinviteEarlyAccess(msg).ContinueWith(r => {
				return SendMsgDisinviteEarlyAccess(msg, new Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        
	}
	
}
