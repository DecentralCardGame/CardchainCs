// Code generated by lxgr
using Cosmcs.Client;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace DecentralCardGame.Cardchain.Cardchain {
	
	public class MsgClient {
		public EasyClient EasyClient { get; }

		public MsgClient (EasyClient client) {
			EasyClient = client;
		}

		public Task<string> SendMsgCreateuser(DecentralCardGame.Cardchain.Cardchain.MsgCreateuser msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateuser"
				}
			);
		}

		public Task<string> SendMsgBuyCardScheme(DecentralCardGame.Cardchain.Cardchain.MsgBuyCardScheme msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyCardScheme"
				}
			);
		}

		public Task<string> SendMsgVoteCard(DecentralCardGame.Cardchain.Cardchain.MsgVoteCard msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgVoteCard"
				}
			);
		}

		public Task<string> SendMsgSaveCardContent(DecentralCardGame.Cardchain.Cardchain.MsgSaveCardContent msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSaveCardContent"
				}
			);
		}

		public Task<string> SendMsgTransferCard(DecentralCardGame.Cardchain.Cardchain.MsgTransferCard msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgTransferCard"
				}
			);
		}

		public Task<string> SendMsgDonateToCard(DecentralCardGame.Cardchain.Cardchain.MsgDonateToCard msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgDonateToCard"
				}
			);
		}

		public Task<string> SendMsgAddArtwork(DecentralCardGame.Cardchain.Cardchain.MsgAddArtwork msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddArtwork"
				}
			);
		}

		public Task<string> SendMsgSubmitCopyrightProposal(DecentralCardGame.Cardchain.Cardchain.MsgSubmitCopyrightProposal msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSubmitCopyrightProposal"
				}
			);
		}

		public Task<string> SendMsgChangeArtist(DecentralCardGame.Cardchain.Cardchain.MsgChangeArtist msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgChangeArtist"
				}
			);
		}

		public Task<string> SendMsgRegisterForCouncil(DecentralCardGame.Cardchain.Cardchain.MsgRegisterForCouncil msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRegisterForCouncil"
				}
			);
		}

		public Task<string> SendMsgReportMatch(DecentralCardGame.Cardchain.Cardchain.MsgReportMatch msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgReportMatch"
				}
			);
		}

		public Task<string> SendMsgSubmitMatchReporterProposal(DecentralCardGame.Cardchain.Cardchain.MsgSubmitMatchReporterProposal msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSubmitMatchReporterProposal"
				}
			);
		}

		public Task<string> SendMsgApointMatchReporter(DecentralCardGame.Cardchain.Cardchain.MsgApointMatchReporter msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgApointMatchReporter"
				}
			);
		}

		public Task<string> SendMsgCreateCollection(DecentralCardGame.Cardchain.Cardchain.MsgCreateCollection msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateCollection"
				}
			);
		}

		public Task<string> SendMsgAddCardToCollection(DecentralCardGame.Cardchain.Cardchain.MsgAddCardToCollection msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddCardToCollection"
				}
			);
		}

		public Task<string> SendMsgFinalizeCollection(DecentralCardGame.Cardchain.Cardchain.MsgFinalizeCollection msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgFinalizeCollection"
				}
			);
		}

		public Task<string> SendMsgBuyCollection(DecentralCardGame.Cardchain.Cardchain.MsgBuyCollection msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyCollection"
				}
			);
		}

		public Task<string> SendMsgRemoveCardFromCollection(DecentralCardGame.Cardchain.Cardchain.MsgRemoveCardFromCollection msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveCardFromCollection"
				}
			);
		}

		public Task<string> SendMsgRemoveContributorFromCollection(DecentralCardGame.Cardchain.Cardchain.MsgRemoveContributorFromCollection msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveContributorFromCollection"
				}
			);
		}

		public Task<string> SendMsgAddContributorToCollection(DecentralCardGame.Cardchain.Cardchain.MsgAddContributorToCollection msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddContributorToCollection"
				}
			);
		}

		public Task<string> SendMsgSubmitCollectionProposal(DecentralCardGame.Cardchain.Cardchain.MsgSubmitCollectionProposal msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSubmitCollectionProposal"
				}
			);
		}

		public Task<string> SendMsgCreateSellOffer(DecentralCardGame.Cardchain.Cardchain.MsgCreateSellOffer msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateSellOffer"
				}
			);
		}

		public Task<string> SendMsgBuyCard(DecentralCardGame.Cardchain.Cardchain.MsgBuyCard msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgBuyCard"
				}
			);
		}

		public Task<string> SendMsgRemoveSellOffer(DecentralCardGame.Cardchain.Cardchain.MsgRemoveSellOffer msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRemoveSellOffer"
				}
			);
		}

		public Task<string> SendMsgAddArtworkToCollection(DecentralCardGame.Cardchain.Cardchain.MsgAddArtworkToCollection msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddArtworkToCollection"
				}
			);
		}

		public Task<string> SendMsgAddStoryToCollection(DecentralCardGame.Cardchain.Cardchain.MsgAddStoryToCollection msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgAddStoryToCollection"
				}
			);
		}

		public Task<string> SendMsgSetCardRarity(DecentralCardGame.Cardchain.Cardchain.MsgSetCardRarity msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetCardRarity"
				}
			);
		}

		public Task<string> SendMsgCreateCouncil(DecentralCardGame.Cardchain.Cardchain.MsgCreateCouncil msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCreateCouncil"
				}
			);
		}

		public Task<string> SendMsgCommitCouncilResponse(DecentralCardGame.Cardchain.Cardchain.MsgCommitCouncilResponse msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgCommitCouncilResponse"
				}
			);
		}

		public Task<string> SendMsgRevealCouncilResponse(DecentralCardGame.Cardchain.Cardchain.MsgRevealCouncilResponse msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRevealCouncilResponse"
				}
			);
		}

		public Task<string> SendMsgRestartCouncil(DecentralCardGame.Cardchain.Cardchain.MsgRestartCouncil msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRestartCouncil"
				}
			);
		}

		public Task<string> SendMsgRewokeCouncilRegistration(DecentralCardGame.Cardchain.Cardchain.MsgRewokeCouncilRegistration msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgRewokeCouncilRegistration"
				}
			);
		}

		public Task<string> SendMsgConfirmMatch(DecentralCardGame.Cardchain.Cardchain.MsgConfirmMatch msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgConfirmMatch"
				}
			);
		}

		public Task<string> SendMsgSetProfileCard(DecentralCardGame.Cardchain.Cardchain.MsgSetProfileCard msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetProfileCard"
				}
			);
		}

		public Task<string> SendMsgOpenBoosterPack(DecentralCardGame.Cardchain.Cardchain.MsgOpenBoosterPack msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgOpenBoosterPack"
				}
			);
		}

		public Task<string> SendMsgTransferBoosterPack(DecentralCardGame.Cardchain.Cardchain.MsgTransferBoosterPack msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgTransferBoosterPack"
				}
			);
		}

		public Task<string> SendMsgSetCollectionStoryWriter(DecentralCardGame.Cardchain.Cardchain.MsgSetCollectionStoryWriter msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetCollectionStoryWriter"
				}
			);
		}

		public Task<string> SendMsgSetCollectionArtist(DecentralCardGame.Cardchain.Cardchain.MsgSetCollectionArtist msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetCollectionArtist"
				}
			);
		}

		public Task<string> SendMsgSetUserWebsite(DecentralCardGame.Cardchain.Cardchain.MsgSetUserWebsite msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetUserWebsite"
				}
			);
		}

		public Task<string> SendMsgSetUserBiography(DecentralCardGame.Cardchain.Cardchain.MsgSetUserBiography msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgSetUserBiography"
				}
			);
		}

		public Task<string> SendMsgMultiVoteCard(DecentralCardGame.Cardchain.Cardchain.MsgMultiVoteCard msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/DecentralCardGame.cardchain.cardchain.MsgMultiVoteCard"
				}
			);
		}

	}
}
